local config_manager = {}

function config_manager:build_configs(library, configs_section)
    local config_list = {}
    local selected_config = nil
    local autoload_file = "viteck/autoload.txt"

    local function update_config_list()
        config_list = {}
        if isfolder("viteck/configs/") then
            for _, file in pairs(listfiles("viteck/configs/")) do
                if file:match("%.lua$") then
                    table.insert(config_list, file:match("viteck/configs/(.+)%.lua$"))
                end
            end
        end
        return config_list
    end

    update_config_list()

    local config_name_textbox = configs_section:Textbox({
        Name = "Config Name",
        Placeholder = "Enter config name",
        State = "",
        Flag = "config_name",
        Callback = function(value)
            selected_config = value
        end
    })

    local config_dropdown = configs_section:dropdown({
        Name = "Select Config",
        Options = config_list,
        Flag = "selected_config",
        Callback = function(value)
            selected_config = value
        end
    })

    configs_section:button({
        Name = "Save Config",
        Callback = function()
            if selected_config and selected_config ~= "" then
                local config_path = "viteck/configs/" .. selected_config .. ".lua"
                local config_data = {}
                for flag, value in pairs(library.flags) do
                    config_data[flag] = value
                end
                writefile(config_path, game:GetService("HttpService"):JSONEncode(config_data))
                library:notification({
                    message = "Config '" .. selected_config .. "' saved successfully",
                    duration = 3,
                    color = library.accent
                })
                config_dropdown:Refresh(update_config_list())
            else
                library:notification({
                    message = "Please enter a valid config name",
                    duration = 3,
                    color = Color3.fromRGB(255, 0, 0)
                })
            end
        end
    })

    configs_section:button({
        Name = "Load Config",
        Callback = function()
            if selected_config and isfile("viteck/configs/" .. selected_config .. ".lua") then
                local config_data = game:GetService("HttpService"):JSONDecode(readfile("viteck/configs/" .. selected_config .. ".lua"))
                for flag, value in pairs(config_data) do
                    if library.flags[flag] ~= nil then
                        if type(value) == "table" and value[1] and value[2] then 
                            library.flags[flag] = value
                            flags[flag](value[1]) 
                            if flags[flag].SetMode then
                                flags[flag]:SetMode(value[2])
                            end
                        elseif type(value) == "table" and value.r then
                            library.flags[flag] = value
                            flags[flag](Color3.new(value.r, value.g, value.b), value.transparency or 1)
                        else
                            library.flags[flag] = value
                            if flags[flag] then
                                flags[flag](value)
                            end
                        end
                    end
                end
                library:notification({
                    message = "Config '" .. selected_config .. "' loaded successfully",
                    duration = 3,
                    color = library.accent
                })
            else
                library:notification({
                    message = "Please select a valid config",
                    duration = 3,
                    color = Color3.fromRGB(255, 0, 0)
                })
            end
        end
    })

    configs_section:button({
        Name = "Delete Config",
        Callback = function()
            if selected_config and isfile("viteck/configs/" .. selected_config .. ".lua") then
                delfile("viteck/configs/" .. selected_config .. ".lua")
                if isfile(autoload_file) and readfile(autoload_file) == selected_config then
                    delfile(autoload_file)
                end
                library:notification({
                    message = "Config '" .. selected_config .. "' deleted successfully",
                    duration = 3,
                    color = library.accent
                })
                config_dropdown:Refresh(update_config_list())
            else
                library:notification({
                    message = "Please select a valid config",
                    duration = 3,
                    color = Color3.fromRGB(255, 0, 0)
                })
            end
        end
    })

    configs_section:button({
        Name = "Refresh Config List",
        Callback = function()
            config_dropdown:Refresh(update_config_list())
            library:notification({
                message = "Config list refreshed",
                duration = 3,
                color = library.accent
            })
        end
    })

    configs_section:button({
        Name = "Set as Autoload",
        Callback = function()
            if selected_config and isfile("viteck/configs/" .. selected_config .. ".lua") then
                writefile(autoload_file, selected_config)
                library:notification({
                    message = "Config '" .. selected_config .. "' set as autoload",
                    duration = 3,
                    color = library.accent
                })
            else
                library:notification({
                    message = "Please select a valid config",
                    duration = 3,
                    color = Color3.fromRGB(255, 0, 0)
                })
            end
        end
    })

    if isfile(autoload_file) then
        local autoload_config = readfile(autoload_file)
        if isfile("viteck/configs/" .. autoload_config .. ".lua") then
            selected_config = autoload_config
            local config_data = game:GetService("HttpService"):JSONDecode(readfile("viteck/configs/" .. autoload_config .. ".lua"))
            for flag, value in pairs(config_data) do
                if library.flags[flag] ~= nil then
                    if type(value) == "table" and value[1] and value[2] then
                        library.flags[flag] = value
                        flags[flag](value[1])
                        if flags[flag].SetMode then
                            flags[flag]:SetMode(value[2])
                        end
                    elseif type(value) == "table" and value.r then
                        library.flags[flag] = value
                        flags[flag](Color3.new(value.r, value.g, value.b), value.transparency or 1)
                    else
                        library.flags[flag] = value
                        if flags[flag] then
                            flags[flag](value)
                        end
                    end
                end
            end
            library:notification({
                message = "Autoloaded config '" .. autoload_config .. "'",
                duration = 3,
                color = library.accent
            })
        end
    end
end

return config_manager
