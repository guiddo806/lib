local config_manager = {}

local function ensure_config_folder()
    if not isfolder("viteck") then
        makefolder("viteck")
    end
    if not isfolder("viteck/configs") then
        makefolder("viteck/configs")
    end
end

local function get_config(library)
    local Config = ""
    for Index, Value in pairs(library.flags) do
        if Index ~= "ConfigConfig_List" and Index ~= "ConfigConfig_Load" and Index ~= "ConfigConfig_Save" then
            local Value2 = Value
            local Final = ""
            --
            if typeof(Value2) == "Color3" then
                local hue, sat, val = Value2:ToHSV()
                Final = ("rgb(%s,%s,%s,%s)"):format(hue, sat, val, 1)
            elseif typeof(Value2) == "table" and Value2.Color and Value2.Transparency then
                local hue, sat, val = Value2.Color:ToHSV()
                Final = ("rgb(%s,%s,%s,%s)"):format(hue, sat, val, Value2.Transparency)
            elseif typeof(Value2) == "table" and Value2.Mode then
                local Values = Value.current
                Final = ("key(%s,%s,%s)"):format(Values[1] or "nil", Values[2] or "nil", Value.Mode)
            elseif Value2 ~= nil then
                if typeof(Value2) == "boolean" then
                    Value2 = ("bool(%s)"):format(tostring(Value2))
                elseif typeof(Value2) == "table" then
                    local New = "table("
                    for _, Value3 in pairs(Value2) do
                        New = New .. Value3 .. ","
                    end
                    if New:sub(#New) == "," then
                        New = New:sub(0, #New - 1)
                    end
                    Value2 = New .. ")"
                elseif typeof(Value2) == "string" then
                    Value2 = ("string(%s)"):format(Value2)
                elseif typeof(Value2) == "number" then
                    Value2 = ("number(%s)"):format(Value2)
                end
                Final = Value2
            end
            Config = Config .. Index .. ": " .. tostring(Final) .. "\n"
        end
    end
    return Config
end

local function load_config(library, Config)
    local Table = string.split(Config, "\n")
    local Table2 = {}
    for _, Value in pairs(Table) do
        local Table3 = string.split(Value, ":")
        if Table3[1] ~= "ConfigConfig_List" and #Table3 >= 2 then
            local Value = Table3[2]:sub(2, #Table3[2])
            if Value:sub(1, 3) == "rgb" then
                local Table4 = string.split(Value:sub(5, #Value - 1), ",")
                Value = Table4
            elseif Value:sub(1, 3) == "key" then
                local Table4 = string.split(Value:sub(5, #Value - 1), ",")
                if Table4[1] == "nil" and Table4[2] == "nil" then
                    Table4[1] = nil
                    Table4[2] = nil
                end
                Value = Table4
            elseif Value:sub(1, 4) == "bool" then
                local Bool = Value:sub(6, #Value - 1)
                Value = Bool == "true"
            elseif Value:sub(1, 5) == "table" then
                local Table4 = string.split(Value:sub(7, #Value - 1), ",")
                Value = Table4
            elseif Value:sub(1, 6) == "string" then
                local String = Value:sub(8, #Value - 1)
                Value = String
            elseif Value:sub(1, 6) == "number" then
                local Number = tonumber(Value:sub(8, #Value - 1))
                Value = Number
            end
            Table2[Table3[1]] = Value
        end
    end
    for i, v in pairs(Table2) do
        if library.flags[i] then
            if typeof(library.flags[i]) == "table" then
                library.flags[i]:Set(v)
            else
                library.flags[i](v)
            end
        end
    end
end

local function get_config_list()
    local config_list = {}
    if isfolder("viteck/configs") then
        local files = listfiles("viteck/configs")
        for _, file in pairs(files) do
            local normalized_file = file:gsub("\\", "/")
            local name = normalized_file:match("viteck/configs/(.+)%.lua$")
            if name then
                table.insert(config_list, name)
            end
        end
    end
    return config_list
end

local function save_config(library, config_name)
    if config_name and config_name ~= "" then
        local config = get_config(library)
        writefile("viteck/configs/" .. config_name .. ".lua", config)
        return true
    end
    return false
end

local function load_config_file(library, config_name)
    if config_name and isfile("viteck/configs/" .. config_name .. ".lua") then
        local config = readfile("viteck/configs/" .. config_name .. ".lua")
        load_config(library, config)
        return true
    end
    return false
end

local function delete_config(config_name)
    if config_name and isfile("viteck/configs/" .. config_name .. ".lua") then
        delfile("viteck/configs/" .. config_name .. ".lua")
        return true
    end
    return false
end

local function set_autoload(library, config_name)
    if config_name and isfile("viteck/configs/" .. config_name .. ".lua") then
        local config = readfile("viteck/configs/" .. config_name .. ".lua")
        writefile("viteck/configs/autoload.txt", config)
        return true
    end
    return false
end

local function apply_autoload(library)
    if isfile("viteck/configs/autoload.txt") then
        local config = readfile("viteck/configs/autoload.txt")
        load_config(library, config)
        library:notification({message = "Autoload config applied", duration = 3, color = library.accent})
    elseif isfile("viteck/configs/default.lua") then
        local config = readfile("viteck/configs/default.lua")
        load_config(library, config)
        library:notification({message = "Default config applied", duration = 3, color = library.accent})
    end
end

function config_manager:build_configs(library, section)
    ensure_config_folder()

    local config_name = section:Textbox({
        Name = "Config Name",
        Placeholder = "Enter config name",
        Callback = function(value)
            library.flags["ConfigName"] = value
        end,
        Flag = "ConfigName"
    })

    local config_dropdown = section:dropdown({
        Name = "Select Config",
        Options = get_config_list(),
        Callback = function(value)
            library.flags["SelectedConfig"] = value
        end,
        Flag = "SelectedConfig"
    })

    section:button({
        Name = "Refresh Config List",
        Callback = function()
            config_dropdown:Refresh(get_config_list())
            library:notification({message = "Config list refreshed", duration = 3, color = library.accent})
        end
    })

    section:button({
        Name = "Save Config",
        Callback = function()
            local name = library.flags["ConfigName"]
            if save_config(library, name) then
                config_dropdown:Refresh(get_config_list())
                library:notification({message = "Config '" .. name .. "' saved", duration = 3, color = library.accent})
            else
                library:notification({message = "Please enter config name", duration = 3, color = library.accent})
            end
        end
    })

    section:button({
        Name = "Load Config",
        Callback = function()
            local name = library.flags["SelectedConfig"]
            if name then
                if load_config_file(library, name) then
                    library:notification({message = "Config '" .. name .. "' loaded", duration = 3, color = library.accent})
                else
                    library:notification({message = "Config '" .. name .. "' not found", duration = 3, color = library.accent})
                end
            else
                library:notification({message = "Please select config", duration = 3, color = library.accent})
            end
        end
    })

    section:button({
        Name = "Delete Config",
        Callback = function()
            local name = library.flags["SelectedConfig"]
            if name then
                if delete_config(name) then
                    config_dropdown:Refresh(get_config_list())
                    library.flags["SelectedConfig"] = nil
                    library:notification({message = "Config '" .. name .. "' deleted", duration = 3, color = library.accent})
                else
                    library:notification({message = "Config '" .. name .. "' not found", duration = 3, color = library.accent})
                end
            else
                library:notification({message = "Please select config", duration = 3, color = library.accent})
            end
        end
    })

    section:button({
        Name = "Set as Autoload",
        Callback = function()
            local name = library.flags["SelectedConfig"]
            if name then
                if set_autoload(library, name) then
                    library:notification({message = "Config '" .. name .. "' set as autoload", duration = 3, color = library.accent})
                else
                    library:notification({message = "Config '" .. name .. "' must be saved first", duration = 3, color = Color3.fromRGB(255, 0, 0)})
                end
            else
                library:notification({message = "Please select a config", duration = 3, color = library.accent})
            end
        end
    })

    apply_autoload(library)
end

return config_manager
