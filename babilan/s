local config_manager = {}

function config_manager:build_configs(library, section)
    local function get_config_list()
        local config_list = {}
        if isfolder("viteck/configs") then
            local files = listfiles("viteck/configs")
            for _, file in pairs(files) do
                local normalized_file = file:gsub("\\", "/")
                local name = normalized_file:match("viteck/configs/(.+)%.lua$")
                if name then
                    table.insert(config_list, name)
                end
            end
        end
        return config_list
    end

    local config_name = section:Textbox({
        Name = "Config Name",
        Placeholder = "Enter config name",
        Callback = function(value)
            library.flags["ConfigName"] = value
        end,
        Flag = "ConfigName"
    })

    local config_dropdown = section:dropdown({
        Name = "Select Config",
        Options = get_config_list(),
        Callback = function(value)
            library.flags["SelectedConfig"] = value
        end,
        Flag = "SelectedConfig"
    })

    section:button({
        Name = "Refresh Config List",
        Callback = function()
            config_dropdown:Refresh(get_config_list())
            library:notification({message = "Config list refreshed", duration = 3, color = library.accent})
        end
    })

    section:button({
        Name = "Save Config",
        Callback = function()
            local config_name = library.flags["ConfigName"]
            if config_name and config_name ~= "" then
                local config = library:GetConfig()
                writefile("viteck/configs/" .. config_name .. ".lua", config)
                config_dropdown:Refresh(get_config_list())
                library:notification({message = "Config '" .. config_name .. "' saved", duration = 3, color = library.accent})
            else
                library:notification({message = "Please enter config name", duration = 3, color = library.accent})
            end
        end
    })

    section:button({
        Name = "Load Config",
        Callback = function()
            local config_name = library.flags["SelectedConfig"]
            if config_name then
                if isfile("viteck/configs/" .. config_name .. ".lua") then
                    local config = readfile("viteck/configs/" .. config_name .. ".lua")
                    library:LoadConfig(config)
                    library:notification({message = "Config '" .. config_name .. "' loaded", duration = 3, color = library.accent})
                else
                    library:notification({message = "Config '" .. config_name .. "' not found", duration = 3, color = library.accent})
                end
            else
                library:notification({message = "Please select config", duration = 3, color = library.accent})
            end
        end
    })

    section:button({
        Name = "Delete Config",
        Callback = function()
            local config_name = library.flags["SelectedConfig"]
            if config_name then
                if isfile("viteck/configs/" .. config_name .. ".lua") then
                    delfile("viteck/configs/" .. config_name .. ".lua")
                    config_dropdown:Refresh(get_config_list())
                    library.flags["SelectedConfig"] = nil
                    library:notification({message = "Config '" .. config_name .. "' deleted", duration = 3, color = library.accent})
                else
                    library:notification({message = "Config '" .. config_name .. "' not found", duration = 3, color = library.accent})
                end
            else
                library:notification({message = "Please select config", duration = 3, color = library.accent})
            end
        end
    })

    section:button({
        Name = "Set as Autoload",
        Callback = function()
            local config_name = library.flags["SelectedConfig"]
            if config_name then
                if isfile("viteck/configs/" .. config_name .. ".lua") then
                    local config = readfile("viteck/configs/" .. config_name .. ".lua")
                    writefile("viteck/configs/autoload.txt", config)
                    library:notification({message = "Config '" .. config_name .. "' set as autoload", duration = 3, color = library.accent})
                else
                    library:notification({message = "Config '" .. config_name .. "' must be saved first", duration = 3, color = Color3.fromRGB(255, 0, 0)})
                end
            else
                library:notification({message = "Please select a config", duration = 3, color = library.accent})
            end
        end
    })

    if isfile("viteck/configs/autoload.txt") then
        local config = readfile("viteck/configs/autoload.txt")
        library:LoadConfig(config)
        library:notification({message = "Autoload config applied", duration = 3, color = library.accent})
    elseif isfile("viteck/configs/default.lua") then
        local config = readfile("viteck/configs/default.lua")
        library:LoadConfig(config)
        library:notification({message = "Default config applied", duration = 3, color = library.accent})
    end
end

return config_manager
